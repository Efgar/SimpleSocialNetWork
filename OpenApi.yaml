openapi: 3.0.0
servers:
  - description: Heroku deploy
    url: https://efghnetwork.herokuapp.com/simplesocialnetwork/v1.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/e311/SimpleSocialNetWork/1.0.0
  - description: Localhost deploy
    url: http://localhost:8080/simplesocialnetwork/v1.0
info:
  description: Simple application to be developed as a recruitment test.
  version: "1.0.0"
  title: Simple Social Network API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /user:
    post:
      tags:
        - user
      summary: Creates a new User in the system.
      operationId: addUser
      description: Creates a new User in the system, please note that at this point the complex objects update is not supported (i.e. followers, followed, posts).
      requestBody:
        description: user to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: if there is any inconsistency with the user object definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
    get:
      tags:
        - user
      summary: Returns users in the system
      operationId: getUsers
      description: Returns the full list of users in the system
      responses:
        '200':
          description: List containing the users in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
  /user/{userHandle}:
    parameters:
      - name: userHandle
        in: path
        description: user whose information you will be retrieving/modifying
        required: true
        schema:
          type: string
    put:
      tags:
        - user
      summary: Modifies a specified user.
      operationId: updateUser
      description: Modifies a specified user with the values provided in an object, please note that at this point the complex objects update is not supported (i.e. followers, followed, posts)
      requestBody:
        description: user object containing the values to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: Modified user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: if there is any inconsistency with the user object definition or if the handle is empty or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: Unexistant user handle sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
    get:
      tags:
        - user
      summary: Retrieves a user details.
      operationId: getUserById
      description: Retrieves a user details given its handle.
      responses:
        '200':
          description: User object containing the requested user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: if the handle is empty or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: Unexistant user handle sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
  /user/{userHandle}/timeline:
    parameters:
      - name: userHandle
        in: path
        description: user whose information you will be retrieving
        required: true
        schema:
          type: string
    get:
      tags:
        - posts
      parameters:
        - name: reverseOrder
          in: query
          description: false to retrieve the posts in chronological order, true to retrieve them in inverse chronological order, defaults to true
          required: false
          schema:
            type: boolean
            default: true
      summary: Get posts made by the followed users.
      operationId: getUserTimeline
      description: Get the compilation of all the posts made by the users being followed by the user shoe handle is specified in the url.
      responses:
        '200':
          description: List of posts sorted according to what was specified.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'
        '400':
          description: if the handle is empty or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: Unexistant user handle sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
  /user/{userHandle}/followed:
    parameters:
      - name: userHandle
        in: path
        description: user whose information you will be retrieving/modifying
        required: true
        schema:
          type: string
    get:
      tags:
        - followers
      summary: Retrieves the list of users being followed.
      operationId: getFollowedUsers
      description: Retrieves the list of users being followed by the user whose handle is specified in the url.
      responses:
        '200':
          description: List of users being followed by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        '400':
          description: if the handle is empty or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: Unexistant user handle sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
    post:
      tags:
        - followers
      summary: Adds a user to the followed list.
      operationId: addFollowedUser
      description: Adds the received user to the followed list of the user specified in the url.
      requestBody:
        description: user to be followed, please note that the only attribute to be taking into account in the request is the user handle.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: User object whose followed list was being modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: if the handle is empty or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: if the provided handle does not correspond to any user on the system or if the sent user to be followed does not match any user in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
  /user/{userHandle}/followed/{followedUserHandle}:
    parameters:
      - name: userHandle
        in: path
        description: user whose information you will be retrieving/modifying
        required: true
        schema:
          type: string
      - name: followedUserHandle
        in: path
        description: user that will be removed from the followed list
        required: true
        schema:
          type: string
    delete:
      tags:
        - followers
      summary: Unfollows a user.
      operationId: removeFollowedUser
      description: Remove a specified user from the followed list of another specified user.
      responses:
        '204':
          description: User removed from the followed list
        '400':
          description: if the handle is empty or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: if the provided handle does not correspond to any user on the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
  /user/{userHandle}/followers:
    parameters:
      - name: userHandle
        in: path
        description: user whose information you will be retrieving
        required: true
        schema:
          type: string
    get:
      tags:
        - followers
      summary: Retrieve the list of followers.
      operationId: getFollowers
      description: Retrieve the list of followers for the specified user.
      responses:
        '200':
          description: List of users that are following the specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: if the handle is empty or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: if the provided handle does not correspond to any user on the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
  /user/{userHandle}/post/:
    parameters:
      - name: userHandle
        in: path
        description: user whose posts you are going to handle
        required: true
        schema:
          type: string
    post:
      tags:
        - posts
      summary: Creates a post for a user.
      operationId: addPost
      description: Add a post on behalf of the specified user with the given text.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post'
      responses:
        '200':
          description: Added post object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
        '400':
          description: Invalid user handle sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: Unexistant user handle sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
    get:
      tags:
        - posts
      parameters:
        - name: reverseOrder
          in: query
          description: false to retrieve the posts in chronological order, true to retrieve them in inverse chronological order, defaults to true
          required: false
          schema:
            type: boolean
            default: true
      summary: Get posts made by a user.
      operationId: getPostsForUser
      description: Get the compilation of all the posts made by the specified user.
      responses:
        '200':
          description: List containing the posts, sorted according what is specified
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'
        '400':
          description: Invalid user handle sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: Unexistant user handle sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
  /user/{userHandle}/post/{uniqueId}:
    parameters:
      - name: userHandle
        in: path
        description: user whose posts you are going to handle
        required: true
        schema:
          type: string
      - name: uniqueId
        in: path
        description: id of the post to be modified
        required: true
        schema:
          type: string
    delete:
      tags:
        - posts
      summary: Delete a post.
      operationId: deletePost
      description: Delete a specified post given its unique Id.
      responses:
        '204':
          description: Process ended without errors
        '400':
          description: Invalid user handle sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: Unexistant user handle or post id sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
    get:
      tags:
        - posts
      summary: Retrieves a post.
      operationId: getPost
      description: Retrieves a post given a specified ID.
      responses:
        '200':
          description: Process ended without errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
        '400':
          description: Invalid user handle sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
        '404':
          description: Unexistant user handle or post id sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apierror'
components:
  schemas:
    user:
      type: object
      required:
        - handle
      properties:
        handle:
          type: string
          example: MyUser
        displayName:
          type: string
          example: My User
    post:
      required:
        - content
      properties:
        content:
          type: string
          example: My new post
        creationDate:
          type: string
          format: date
        uniqueID:
          type: string
          format: uuid
          example: 408-867-5309
    apierror:
      properties:
        errorMessage:
          type: string
          example: "NoSuchElementException: User not found for the given handle"
        errorCause:
          type: string
          example: "NoSuchElementException: User not found for the given handle"
        errorStack:
          type: string
          example: "java.util.NoSuchElementException: User not found for the given handle\r\n\tat com.efgh.model.Network.getUser(Network.java:57)\r\n\tat com.efgh.service.PostService.getPostsByUserHandle(PostService.java:29)\r\n\tat com.efgh.controller.PostController.getPostsForUser(PostController.java:36)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)"